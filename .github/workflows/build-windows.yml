name: Build

on:
  workflow_dispatch:
  push:

jobs:
  build:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
        python-version: ['3.10']

    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.2

      - name: STEP 1. Checkout repository
        uses: actions/checkout@v3

      - name: STEP 2. Set up Python
        id: install-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download Boost
        id: download-boost
        uses: suisei-cn/actions-download-file@v1.4.0
        with:
          url: https://boostorg.jfrog.io/artifactory/main/release/1.74.0/source/boost_1_74_0.zip

#      - name: Install Boost
#        id: install-boost
#        run: |
#          $BOOST_ROOT="D:\boost"
#          $INSTALL_LOG="install.log"
#          mkdir $BOOST_ROOT
#          Expand-Archive ${{ steps.download-boost.outputs.filename }} -DestinationPath $BOOST_ROOT
#          echo "::debug::Installing..."
#          .\${{ steps.download-boost.outputs.filename }} /SP- /VERYSILENT /SUPPRESSMSGBOXES /DIR="$BOOST_ROOT" /LOG="$INSTALL_LOG"
#          echo "::debug::Installer finished with code $LASTEXITCODE"
#          type $INSTALL_LOG
#          dir $BOOST_ROOT
#          echo "BOOST_ROOT=$BOOST_ROOT" >> $env:GITHUB_OUTPUT

      - name: Install Boost
        id: install-boost
        run: |
          $BOOST_ROOT="D:\boost"
          $INSTALL_LOG="install.log"
          mkdir $BOOST_ROOT
          Expand-Archive ${{ steps.download-boost.outputs.filename }} -DestinationPath $BOOST_ROOT
          cd $BOOST_ROOT\*
          echo "BOOST_ROOT=$pwd" >> $env:GITHUB_OUTPUT
          echo "BOOST_ROOT=$pwd" >> $env:GITHUB_ENV
          echo "BOOST_LIBRARYDIR=$pwd\stage\lib" >> $env:GITHUB_ENV

# Missing python files in boost directory. b2 tries to mklink them unsuccessfully
#      - name: STEP 3. Install Boost
#        id: install-boost
#        uses: MarkusJx/install-boost@main
#        with:
#          boost_version: 1.74.0
#          platform_version: 2019

      - name: STEP 4. Build Boost.Python
        run: |
          ls $env
          cd ${{ steps.install-boost.outputs.BOOST_ROOT }}
          ls
          .\bootstrap.bat
          $escapedPythonPath = "${{ steps.install-python.outputs.python-path }}" -Replace "\\","\\"
          echo "using python : : ""$escapedPythonPath"" ;" >> project-config.jam
          type project-config.jam
          .\b2.exe stage link=static runtime-link=static --with-python --debug-configuration

      - name: STEP 5. Build wheel
        run: |
          python setup.py v8
          python setup.py sdist bdist_wheel -d stpyv8-${{ matrix.os }}-${{ matrix.python-version }}
          python setup.py install
          cp v8/out.gn/x64.release.sample/icudtl.dat stpyv8-${{ matrix.os }}-${{ matrix.python-version }}/icudtl.dat
        # env:
        #   V8_DEPS_LINUX: 0
        #   LDFLAGS: -L/usr/lib -L/usr/lib/x86_64-linux-gnu

      # - name: STEP 6. Test wheel
      #   run: |
      #     pytest -v

      # - name: STEP 7. Create wheel zip
      #   uses: vimtor/action-zip@v1.1
      #   with:
      #     files: stpyv8-${{ matrix.os }}-${{ matrix.python-version }}/
      #     recursive: false
      #     dest: stpyv8-${{ matrix.os }}-python-${{ matrix.python-version }}.zip

      # - name: STEP 7. Upload wheel zip
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: wheels
      #     path: stpyv8-${{ matrix.os }}-python-${{ matrix.python-version }}.zip
