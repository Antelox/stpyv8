name: Build Windows

on:
  workflow_dispatch:
  push:

jobs:
  build-v8:
    # If v8 is in Workflow cache, don't build
    # Clone is necessary in any event to calculate a hash for the cache key
    name: Build v8
    runs-on: windows-latest
    outputs:
      v8-hash: ${{ steps.build-v8.outputs.v8-hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Clone v8
        run: |
          python -m pip install wheel
          echo "::group::Clone v8"
          python setup.py checkout_v8
          echo "::endgroup::"

      - name: Restore v8 from cache
        id: restore-v8
        uses: actions/cache/restore@v3
        with:
          path: v8\out.gn\x64.release.sample\obj\v8_monolith.lib
          key: ${{ runner.os }}-build-v8-${{ hashFiles('v8/src/**') }}

      - name: Initialize MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ steps.restore-v8.outputs.cache-hit != 'true' }}
        with:
          toolset: 14.2

      - name: Build v8
        id: build-v8
        if: ${{ steps.restore-v8.outputs.cache-hit != 'true' }}
        continue-on-error: false
        run: |
          echo "v8-hash=${{ hashFiles('v8/src/**') }}" >> "$GITHUB_OUTPUT"
          python -m pip install wheel
          echo "::group::v8"
          python setup.py v8
          echo "::endgroup::"

      - name: Save v8 to cache
        uses: actions/cache/save@v3
        if: ${{ steps.restore-v8.outputs.cache-hit != 'true' }}
        with:
          # Save compiled binary and header files
          # This will save an additional clone of v8 for the linker
          path: |
            v8\out.gn\x64.release.sample\obj\v8_monolith.lib
            v8\include
          key: ${{ runner.os }}-build-v8-${{ hashFiles('v8/src/**') }}

  build:
    name: Build wheel on ${{ matrix.os }}
    needs: build-v8
    runs-on: ${{ matrix.os }}
    env:
      BOOST_ROOT: $RUNNER_TEMP\boost
    strategy:
      matrix:
        os: [windows-2019]
        python-version: ['3.10']

    steps:
      - name: STEP 1. Checkout repository
        uses: actions/checkout@v3

      - name: STEP 2. Set up Python
        id: install-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Restore Boost.Python from cache
        id: restore-boost-python
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.BOOST_ROOT }}\stage\lib
          key: libboost_python-${{ matrix.python-version }}_vc142

      - name: Download Boost
        if: ${{ steps.restore-boost-python.outputs.cache-hit != 'true' }}
        id: download-boost
        uses: suisei-cn/actions-download-file@v1.4.0
        # Pending further investigation, this Windows build requires Boost.Python v1.74.0
        with:
          url: https://boostorg.jfrog.io/artifactory/main/release/1.74.0/source/boost_1_74_0.zip

      - name: Install Boost
        if: ${{ steps.restore-boost-python.outputs.cache-hit != 'true' }}
        id: install-boost
        run: |
          mkdir $env:BOOST_ROOT
          Expand-Archive ${{ steps.download-boost.outputs.filename }} -DestinationPath $env:BOOST_ROOT
          cd $env:BOOST_ROOT\*
          echo "BOOST_ROOT=$pwd" >> $env:GITHUB_OUTPUT
          echo "BOOST_ROOT=$pwd" >> $env:GITHUB_ENV
          echo "BOOST_LIBRARYDIR=$pwd\stage\lib" >> $env:GITHUB_ENV

      - name: STEP 4. Build Boost.Python
        if: ${{ steps.restore-boost-python.outputs.cache-hit != 'true' }}
        working-directory: ${{ steps.install-boost.outputs.BOOST_ROOT }}
        run: |
          .\bootstrap.bat
          if (-not $?) { type bootstrap.log }
          $escapedPythonPath = "${{ steps.install-python.outputs.python-path }}" -Replace "\\","\\"
          echo "using python : : ""$escapedPythonPath"" ;" >> project-config.jam
          (Get-Content libs\python\src\exec.cpp).replace('_Py_fopen', 'fopen') | Set-Content libs\python\src\exec.cpp
          .\b2.exe stage link=static runtime-link=static --with-python --with-iostreams
          dir -Path C:\FolderName -Filter libboost_iostreams-vc142-mt-s-x64-1_74.lib -Recurse -ErrorAction SilentlyContinue -Force | %{$_.FullName}
          ls stage\lib

      - name: Save Boost to cache
        uses: actions/cache/save@v3
        if: ${{ steps.restore-boost-python.outputs.cache-hit != 'true' }}
        with:
          path: ${{ steps.install-boost.outputs.BOOST_ROOT }}\stage\lib
          key: libboost_python-${{ matrix.python-version }}_vc142

      - name: Restore v8 from cache
        id: restore-v8
        uses: actions/cache/restore@v3
        with:
          path: |
            v8\out.gn\x64.release.sample\obj\v8_monolith.lib
            v8\include
          key: ${{ runner.os }}-build-v8-${{ needs.build-v8.outputs.v8-hash }}

      - name: STEP 5. Build wheel
        env:
          # Set include and library files which will be picked up by setuptools
          INCLUDE: ${{ env.INCLUDE }};${{ steps.install-python.outputs.python-path }}include;${{ env.BOOST_ROOT }};v8\include
          LIB: ${{ env.LIB }};v8\out.gn\x64.release.sample\obj
        run: |
          python -m pip install wheel
          python setup.py sdist bdist_wheel --skip-build-v8 -d stpyv8-${{ matrix.os }}-${{ matrix.python-version }}
          python setup.py install
          if ((Get-ChildItem build\lib.win32* | Measure-Object) -eq 0) {
            echo "::error::Wheel build failed (no artifacts generated)"
            exit 1
          }

      - name: STEP 6. Test wheel
        run: |
          python -m pip install pytest
          pytest -v

      - name: STEP 7. Create wheel zip
        uses: vimtor/action-zip@v1.1
        with:
          files: stpyv8-${{ matrix.os }}-${{ matrix.python-version }}/
          recursive: false
          dest: stpyv8-${{ matrix.os }}-python-${{ matrix.python-version }}.zip

      # - name: STEP 7. Upload wheel zip
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: wheels
      #     path: stpyv8-${{ matrix.os }}-python-${{ matrix.python-version }}.zip
